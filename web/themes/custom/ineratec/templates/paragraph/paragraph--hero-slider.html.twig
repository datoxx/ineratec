{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('ineratec/hero-slider') }}

{% block paragraph %}
	<section class="w-full h-screen z-[1] mb-[127.5px] lg:mb-[193px]">
		<div class="swiper product-page-hero-slider product-carousel w-full h-screen">
			<div class="swiper-wrapper">
				{% for paragraph in content.field_hero_slider_elemente %}
					{% if paragraph["#paragraph"]%}
						<div class="swiper-slide hero-slider bg-no-repeat lg:bg-right-bottom bg-bottom bg-contain " style="background-image: url('{{ file_url(paragraph['#paragraph'].field_slider_hero_bild.entity.uri.value) }}');">
							<div class="w-full h-full">
								<div class="flex flex-col lg:justify-center justify-start font-PtSansBold text-white  content-wrapper w-full h-full lg:pt-0 pt-[150px]">
									<h1 class="heading-h2 mb-[19px] lg:mb-10 lg:max-w-[874px] z-30">
										{{ paragraph['#paragraph'].field_hero_slider_headline.0.value | raw |replace({'\\n': "\n"})|nl2br }}
									</h1>
									<div class="p-intro mb-[27px] lg:mb-[65px] lg:max-w-[945px] z-30">
										{{ paragraph['#paragraph'].field_slider_hero_text.0.value | raw }}
									</div>
								{% if paragraph['#paragraph'].field_slider_hero_button.0.url %}
									<a href="{{ paragraph['#paragraph'].field_slider_hero_button.0.url }}" class="btn-bg-blue z-30">
										{{ paragraph['#paragraph'].field_slider_hero_button.0.title }}
									</a>
								{% endif %}
								</div> 
							</div>	
						</div>
					{% endif %}
				{% endfor %}
			</div>
			<div class="flex items-center justify-center  z-[50] absolute bottom-5 w-full">
				<div class="swiper-button-prev-hc hero-slider-button-prev-hc">
					<img class="h-4 w-4" src="/{{ base_path ~ directory }}/assets/icons/chevron-left.svg">
				</div>
				<div class="swiper-pagination product-hero-slider-pagination static"></div>
				<div class="swiper-button-next-hc hero-slider-button-next-hc">
					<img class="h-4 w-4" src="/{{ base_path ~ directory }}/assets/icons/chevron-right.svg">
				</div>
			</div>
		</div>
	</section>
{% endblock paragraph %}

