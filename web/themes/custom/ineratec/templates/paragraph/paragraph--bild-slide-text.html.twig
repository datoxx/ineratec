{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if content.field_bild_slide_ausrichtung.0["#markup"] == 0 %}
	{% set flex = 'lg:flex-row' %}
{% else %}
	{% set flex = 'lg:flex-row-reverse  justify-between' %}
{% endif %}

{{ attach_library('ineratec/bildslide-text') }}

{% block paragraph %}
	<div class="content-wrapper">
		<div class="lg:gap-[150px] gap:[15px] flex flex-col  {{ flex }} items-center border-b-[1px] border-solid border-blue border-opacity-30 mb-[100px] pb-[100px]">
			{% if content.field_bild_slide_images['#items'] | length > 1 %}
				<div class="swiper blid-slide-swiper lg:ml-0 lg:mr-0 lg:max-w-[700px] max-w-[335px]">
					<div class="swiper-wrapper flex justify-self-start items-center ">
						{% for image in content.field_bild_slide_images['#items'] %}
							<div class="swiper-slide ">
								<img src="{{ file_url(image.entity.uri.value) }}" alt="{{ image['#item'].alt}}" class="w-full h-auto object-contain"/>
							</div>
						{% endfor %}
					</div>
				</div>
			{% else %}
				<div class="lg:max-w-[700px] max-w-[335px]">
					<img src="{{ file_url(content.field_bild_slide_images[0]['#item'].entity.uri.value) }}" alt="{{ content.field_bild_slide_images[0]['#item'].alt}}" class="w-full object-contain"/>
				</div>
			{% endif %}
			<div class="flex flex-col max-w-[335px] lg:max-w-[419px] text-white">
				<h2 class="heading-h3 lg:mb-[14px] mb-[17px]">
					{{ content.field_bild_slide_headline.0 }}
				</h2>
				<div class="p-normal">
					{{ content.field_bild_slide_text.0 }}
				</div>
				{% if content.field_bild_slide_button.0['#url'] %}
					<a href="{{ content.field_bild_slide_button.0['#url'] }}" class="text-[16px] font-bold transition-all duration-150 hover:bg-lightBlue text-center text-white bg-blue rounded px-[40px] py-[15px] w-full lg:w-fit mt-[23px] lg:mt-[60px] inline-block">
						{{ content.field_bild_slide_button.0['#title'] }}
					</a>
				{% endif %}	
			</div>
		</div>
	</div>	
{% endblock paragraph %}
