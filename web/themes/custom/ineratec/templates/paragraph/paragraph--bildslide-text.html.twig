{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% block paragraph %}
  <section class="bg-white overflow-x-hidden">
    {% if content.field_bildside_ausrichtung['#items'].getString() == 0 %}
    <div
      class="content-wrapper w-full lg:gap-[30px] pb-[80px] lg:pb-[180px] flex flex-col lg:flex-row justify-between items-center lg:items-start ">
      {% else %}
      <div
        class="content-wrapper w-full lg:gap-[30px] pb-[80px] lg:pb-[180px] flex flex-col lg:flex-row-reverse  justify-between lg:items-start ">
        {% endif %}
        <div class="block w-full h-[188px] lg:max-w-[761px] lg:h-[428px]">
          <img src="{{ file_url(content.field_bildside_images.0['#item'].entity.uri.value) }}" alt="{{ content.field_bildside_images['#items'].value.0.alt  }}" class="block object-cover w-full h-full" />
        </div>
        <div class="lg:max-w-[419px]">
          <div class="bg-gradient-to-b from-green to-blue w-1">
            <div class="ml-[30px] w-[300px] lg:max-w-[389px] mt-[19px] gap-[10px] lg:mt-0 flex flex-col">
              <span class="heading-h6">{{ content.field_bildside_subline }}</span>
              <h3 class="heading-h4">
                {{ content.field_bildside_headline.0['#context'].value|replace({'\\n': "\n"})|nl2br }}
              </h3>
            </div>
          </div>
          <div class="w-full">
            <div class="p-normal my-[30px]">
              {{ content.field_bildside_text }}
            </div>
          </div>
          <div>
            <a href="{{ content.field_bildside_link[0]['#url'] }}" class="flex btn-text-blue"><span class="hover:underline mr-2">{{ 'Mehr
                erfahren' | t }}</span>
              <img src="/{{ base_path ~ directory }}/assets/icons/arrow-right-1.svg" alt="arrow icon" class="mt-[2px]" />
            </a>
          </div>
        </div>
      </div>
  </section>
{% endblock paragraph %}

