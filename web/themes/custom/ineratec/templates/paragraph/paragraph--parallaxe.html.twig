{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% block paragraph %}
	{% for paragraph in content.field_parallax_element %}
		{% if paragraph["#paragraph"] %}
			{% if paragraph['#paragraph'].field_parallax_headline.0.value %}
				<div class="flex justify-center items-center w-full h-screen bg-center bg-fixed bg-no-repeat bg-cover relative" style="background-image: url('{{ file_url(paragraph['#paragraph'].field_parallax_image.entity.uri.value) }}');">
					<div class="absolute w-full h-full z-10 top-0 left-0" style="background-image: url('/{{ base_path ~ directory }}/assets/overlay.svg');"></div>
					<div class="content-wrapper text-white relative z-20">
						<h1 class="text-[45px] leading-[45px] lg:text-[180px] lg:leading-[120px] font-PtSansBold">
							{{ paragraph['#paragraph'].field_parallax_headline.0.value|replace({'\\n': "\n"})|nl2br | raw }}
						</h1>
					</div>
				</div>
			{% else %}
				<div class="w-full h-screen bg-center bg-fixed bg-no-repeat bg-cover relative" style="background-image: url('{{ file_url(paragraph['#paragraph'].field_parallax_image.entity.uri.value) }}');">
					<div class="flex justify-center items-center bg-black opacity-90 w-full h-full absolute top-0 left-0 z-10">
						<div class="content-wrapper text-white">
							<div class="flex flex-col gap-6 lg:gap-[30px]">
								{{ paragraph['#paragraph'].field_parallax_text.0.value | raw }}
							</div>
						</div>
					</div>
				</div>
			{% endif %}
		{% endif %}
	{% endfor %}
{% endblock paragraph %}